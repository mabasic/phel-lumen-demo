(ns hello-world\boot
    (:use \Laravel\Lumen\Bootstrap\LoadEnvironmentVariables)
    (:use \Laravel\Lumen\Application))

# Workaround for Phel not having access to PHP `__DIR__`.
(def home-dir "/home/mabasic/code/src/github.com/mabasic/phel-lumen-demo")

(php/-> (php/new LoadEnvironmentVariables home-dir) (bootstrap))

(php/date_default_timezone_set (php/env "APP_TIMEZONE" "UTC"))

# --------------------------------------------------------------------------
#  Create The Application
# --------------------------------------------------------------------------
#
#  Here we will load the environment and create the application instance
#  that serves as the central piece of this framework. We'll use this
#  application as an "IoC" container and router for this framework.

(def app (php/new Application home-dir))

# (php/-> app (withFacades))

# (php/-> app (withEloquent))

# --------------------------------------------------------------------------
#  Register Container Bindings
# --------------------------------------------------------------------------
#
#  Now we will register a few bindings in the service container. We will
#  register the exception handler and the console kernel. You may add
#  your own bindings here if you like or you can make another file.

(php/-> app (singleton
    \Illuminate\Contracts\Debug\ExceptionHandler::class
    \App\Exceptions\Handler::class))

(php/-> app (singleton
    \Illuminate\Contracts\Console\Kernel::class
    \App\Console\Kernel::class))

# --------------------------------------------------------------------------
#  Register Config Files
# --------------------------------------------------------------------------
#
#  Now we will register the "app" configuration file. If the file exists in
#  your configuration directory it will be loaded; otherwise, we'll load
#  the default version. You may register other files below as needed.

(php/-> app (configure "app"))

# --------------------------------------------------------------------------
#  Register Middleware
# --------------------------------------------------------------------------
#
#  Next, we will register the middleware with the application. These can
#  be global middleware that run before and after each request into a
#  route or middleware that'll be assigned to some specific routes.

# $app->middleware([
#     App\Http\Middleware\ExampleMiddleware::class
# ]);

# (php/-> app (middleware @[
#     \App\Http\Middleware\ExampleMiddleware::class
# ]))

# $app->routeMiddleware([
#     'auth' => App\Http\Middleware\Authenticate::class,
# ]);

# (php/-> app (middleware @{
#     :auth \App\Http\Middleware\Authenticate::class
# }))

# --------------------------------------------------------------------------
#  Register Service Providers
# --------------------------------------------------------------------------
#
#  Here we will register all of the application's service providers which
#  are used to bind services into the container. Service providers are
#  totally optional, so you are not required to uncomment this line.

# (php/-> app (register \App\Providers\AppServiceProvider::class))
# (php/-> app (register \App\Providers\AuthServiceProvider::class))
# (php/-> app (register \App\Providers\EventServiceProvider::class))

# --------------------------------------------------------------------------
#  Load The Application Routes
# --------------------------------------------------------------------------
#
#  Next we will include the routes file so that they can all be added to
#  the application. This will provide all of the URLs the application
#  can respond to, as well as the controllers that may handle them.

# Argument 1 passed to Laravel\Lumen\Routing\Router::group() must be of the type array, object given
#
# This is a way to create a key value array in Phel for PHP.
# (let [arr (php/array)] (php/aset arr "namespace" "\App\Http\Controllers") (print arr))
#
# Argument 2 passed to Laravel\Lumen\Routing\Router::group() must be an instance of Closure, instance of class@anonymous given
#
# This I don't know how to resolve.
#
# Code block bellow does not run. Do I need it to run?
# (php/-> (php/-> app router) (group @{
#     :namespace "\App\Http\Controllers"
# } (fn [router] (php/require (str home-dir "/../routes/web.php")))))

# This is how the code above looks like in PHP.
# $app->router->group([
#     'namespace' => 'App\Http\Controllers',
# ], function ($router) {
#     require __DIR__.'/../routes/web.php';
# });

# --------------------------------------------------------------------------
#  Routes (Phel) (Playground)
# --------------------------------------------------------------------------

# Prints the environment in which the app is running.
# `local` means that the .env file is loaded. `production` means that something is wrong.
# (print (php/-> app (environment)))

# This returns "hello world" on `/`.
# (php/-> (php/-> app router) (get "/" (fn [] "hello world")))

# Trying to create a function which I can pass to the router.
# (defn get-home
#     "It returns the home view."
#     (php/view "home"))

(php/-> (php/-> app router) (get "/" (fn [] (php/view "home"))))
# (php/-> (php/-> app router) (get "/" get-home))

# --------------------------------------------------------------------------
#  Run The Application
# --------------------------------------------------------------------------
#
#  Once we have the application, we can handle the incoming request
#  through the kernel, and send the associated response back to
#  the client's browser allowing them to enjoy the creative
#  and wonderful application we have prepared for them.

(php/-> app (run))